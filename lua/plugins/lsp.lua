return {
  {
    "williamboman/mason.nvim",
    opts = {
      ensure_installed = {
        "ansible-language-server",
        "arduino-language-server",
        "bash-language-server",
        "cmake-language-server",
        "css-lsp",
        "cssmodules-language-server",
        "css-variables-language-server",
        "custom-elements-languageserver",
        "deno",
        "dockerfile-language-server",
        "docker-compose-language-service",
        "eslint_d",
        "emmet-ls",
        "graphql-language-service-cli",
        "html-lsp",
        "java-language-server",
        "json-lsp",
        "lua-language-server",
        "markdown-oxide",
        "nginx-language-server",
        "prettierd",
        "biome",
        "stylelint",
        "stylelint-lsp",
        -- "pgsql-language-server",
        "python-lsp-server",
        "rust-analyzer",
        "sqlfmt",
        "sqlls",
        "stylua",
        "svelte-language-server",
        "tailwindcss-language-server",
        "terraform-ls",
        "yaml-language-server",
        "typescript-language-server",
        "vim-language-server",
        "write-good",
        "js-debug-adapter",
      },
    },
  },
  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
    keys = {
      -- LSP Mappings
      { "<leader>li", ":LspInfo<CR>", desc = "LSP Info", noremap = true, silent = true },
      {
        "K",
        "<cmd>lua vim.lsp.buf.hover({ border = 'single', max_height = 25, max_width = 120 })<CR>",
        desc = "Hover Documentation",
        noremap = true,
        silent = true,
      },
      { "<leader>lf", "<cmd>lua vim.lsp.buf.format()<CR>", desc = "Format Document", noremap = true, silent = true },
      {
        "<leader>ld",
        "<cmd>lua vim.diagnostic.open_float()<CR>",
        desc = "Line Diagnostics",
        noremap = true,
        silent = true,
      },
      {
        "<leader>lD",
        "<cmd>lua vim.diagnostic.setloclist()<CR>",
        desc = "All Diagnostics",
        noremap = true,
        silent = true,
      },
      { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<CR>", desc = "Code Actions", noremap = true, silent = true },
      {
        "<leader>lh",
        "<cmd>lua vim.lsp.buf.signature_help()<CR>",
        desc = "Signature Help",
        noremap = true,
        silent = true,
      },
      { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<CR>", desc = "Rename", noremap = true, silent = true },
      {
        "<leader>lG",
        "<cmd>lua vim.lsp.buf.workspace_symbol()<CR>",
        desc = "Workspace Symbols",
        noremap = true,
        silent = true,
      },
      { "]d", "<cmd>lua vim.diagnostic.goto_next()<CR>", desc = "Next Diagnostic", noremap = true, silent = true },
      { "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>", desc = "Previous Diagnostic", noremap = true, silent = true },
      { "gD", "<cmd>lua vim.lsp.buf.declaration()<CR>", desc = "Declaration", noremap = true, silent = true },
      { "gy", "<cmd>lua vim.lsp.buf.type_definition()<CR>", desc = "Type Definition", noremap = true, silent = true },
      { "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", desc = "Definition", noremap = true, silent = true },
      { "gI", "<cmd>lua vim.lsp.buf.implementation()<CR>", desc = "Implementation", noremap = true, silent = true },
      { "grr", ":Telescope lsp_references<CR>", desc = "References", noremap = true, silent = true },
      { "<leader>lR", ":Telescope lsp_references<CR>", desc = "References", noremap = true, silent = true },
      { "gr.", ":Telescope resume<CR>", desc = "Resume Last Telescope", noremap = true, silent = true },
      {
        "<leader>ls",
        ":Telescope lsp_document_symbols<CR>",
        desc = "LSP Document Symbols",
        noremap = true,
        silent = true,
      },
      {
        "<leader>lG",
        ":Telescope lsp_workspace_symbols<CR>",
        desc = "LSP Workspace Symbols",
        noremap = true,
        silent = true,
      },
    },
  },
}
